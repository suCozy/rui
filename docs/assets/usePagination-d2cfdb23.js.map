{"version":3,"file":"usePagination-d2cfdb23.js","sources":["../../src/mixins/breakpoints/const.ts","../../src/mixins/breakpoints/index.ts","../../src/components/Common/Paginations/styles.ts","../../src/components/Common/Paginations/usePagination.ts"],"sourcesContent":["export const mobileSizeBreak = 768;\nexport const mobileSmallSizeBreak = 320;\nexport const landingMobileSizeBreak = 1000;\n\nexport const mobile360Break = 360;\n","import type { FlattenSimpleInterpolation } from 'styled-components';\nimport { css } from 'styled-components';\n\nimport {\n  landingMobileSizeBreak,\n  mobileSizeBreak,\n  mobileSmallSizeBreak,\n  mobile360Break,\n} from './const';\n\nexport * from './const';\n\n/** `max-width: ${mobileSmallSizeBreak}px` */\nexport const mobileSmallOnly = (cssContent: FlattenSimpleInterpolation) => css`\n  @media only screen and (max-width: ${mobileSmallSizeBreak}px) {\n    ${cssContent}\n  }\n`;\n\n/** `max-width: ${mobile360Break}px` */\nexport const mobile360pxOnly = (cssContent: FlattenSimpleInterpolation) => css`\n  @media only screen and (max-width: ${mobile360Break}px) {\n    ${cssContent}\n  }\n`;\n/** `max-width: ${mobileSizeBreak}px` */\nexport const mobileOnly = (cssContent: FlattenSimpleInterpolation) => css`\n  @media only screen and (max-width: ${mobileSizeBreak}px) {\n    ${cssContent}\n  }\n`;\n\n/** `min-width: ${mobileSizeBreak + 1}px` */\nexport const desktopOnly = (cssContent: FlattenSimpleInterpolation) => css`\n  @media only screen and (min-width: ${mobileSizeBreak + 1}px) {\n    ${cssContent}\n  }\n`;\n\n/** `max-width: ${landingMobileSizeBreak}px` */\nexport const landingMobileOnly = (\n  cssContent: FlattenSimpleInterpolation\n) => css`\n  @media only screen and (max-width: ${landingMobileSizeBreak}px) {\n    ${cssContent}\n  }\n`;\n\n/** `min-width: ${landingMobileSizeBreak + 1}px` */\nexport const landingDesktopOnly = (\n  cssContent: FlattenSimpleInterpolation\n) => css`\n  @media only screen and (min-width: ${landingMobileSizeBreak + 1}px) {\n    ${cssContent}\n  }\n`;\n\n/** mobileSizeBreak 이하에서 `display: none;` */\nexport const displayDesktopOnly = css`\n  ${mobileOnly(css`\n    display: none !important;\n  `)}\n`;\n\n/** mobileSizeBreak 이상에서 `display: none;` */\nexport const displayMobileOnly = css`\n  ${desktopOnly(css`\n    display: none !important;\n  `)}\n`;\n","import styled, { css } from 'styled-components';\n\nimport {\n  bg100,\n  bg200,\n  bg300,\n  contents000,\n  contents300,\n  getTypographyStyles,\n} from '@/mixins';\nimport { mobileOnly, desktopOnly } from '@/mixins/breakpoints';\n\nexport const PaginationContainer = styled.nav`\n  all: unset;\n  display: inline-flex;\n  list-style-type: none;\n  box-sizing: border-box;\n  user-select: none;\n  margin: 0;\n  padding: 0;\n  gap: 16px;\n\n  ${mobileOnly(css`\n    gap: 8px;\n  `)};\n`;\n\nexport const CompactPaginationContainer = styled.div`\n  all: unset;\n\n  ${getTypographyStyles('Body1_M')}\n  gap: 16px;\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  height: fit-content;\n`;\n\nexport const CurrentPage = styled.span`\n  ${getTypographyStyles('Body1_B')}\n`;\n\nexport const Pages = styled.ul`\n  all: unset;\n  display: inherit;\n  gap: 4px;\n`;\n\nexport const Page = styled.li``;\n\nconst DefaultButton = styled.button`\n  all: unset;\n  appearance: none;\n  box-sizing: border-box;\n\n  ${getTypographyStyles('Body1_M')}\n  display: grid;\n  place-items: center;\n\n  min-width: 34px;\n  height: 34px;\n  cursor: pointer;\n  color: ${contents000};\n  border-radius: 4px;\n\n  &:disabled {\n    color: ${contents000};\n    cursor: not-allowed;\n    pointer-events: none;\n  }\n`;\n\nexport const ArrowButton = styled(DefaultButton)`\n  ${desktopOnly(css`\n    &:hover {\n      background-color: ${bg200};\n    }\n    &:active {\n      background-color: ${bg300};\n    }\n  `)}\n\n  ${mobileOnly(css`\n    min-width: 44px;\n    height: 44px;\n  `)}\n`;\n\nexport const BaseButton = styled(DefaultButton)`\n  &:hover,\n  &:focus {\n    border: solid 1px ${contents300};\n    border-radius: 4px;\n    background-color: ${bg100};\n  }\n\n  ${mobileOnly(css`\n    min-width: 44px;\n    height: 44px;\n  `)}\n`;\n\nexport const PageButton = styled(BaseButton)<{ selected?: boolean }>`\n  ${({ selected }) =>\n    selected &&\n    css`\n      border: solid 1px ${contents300};\n      border-radius: 4px;\n      background-color: ${bg100};\n    `}\n`;\n","import { useMemo } from 'react';\n\nimport type { PaginationItems } from './types';\n\nfunction usePagination({\n  itemCountPerPage,\n  pageRangeDisplayed,\n  totalItemCount,\n  activePage,\n}: PaginationItems) {\n  const buffer = activePage % pageRangeDisplayed === 0 ? 1 : 0;\n\n  const firstPage = Math.max(\n    1,\n    Math.floor(activePage / pageRangeDisplayed - buffer) * pageRangeDisplayed +\n      1\n  );\n\n  const totalPages = Math.ceil(totalItemCount / itemCountPerPage);\n\n  const rangeLastPage = useMemo(\n    () =>\n      Math.min(\n        totalPages,\n        Math.ceil(activePage / pageRangeDisplayed) * pageRangeDisplayed\n      ),\n    [activePage, pageRangeDisplayed, totalPages]\n  );\n\n  const totalLastPage = useMemo(\n    () => (!totalItemCount ? 1 : Math.ceil(totalItemCount / itemCountPerPage)),\n    [totalItemCount, itemCountPerPage]\n  );\n\n  const prevPage = firstPage - 1;\n  const nextPage = rangeLastPage + 1;\n\n  const isPrevPageDisabled = prevPage < 1;\n  const isNextPageDisabled = nextPage > totalPages;\n\n  const isFirstPageDisabled = activePage === 1;\n  const isLastPageDisabled = activePage === totalLastPage;\n\n  return {\n    firstPage,\n    rangeLastPage,\n    totalLastPage,\n    totalPages,\n    prevPage,\n    nextPage,\n    isPrevPageDisabled,\n    isNextPageDisabled,\n    isFirstPageDisabled,\n    isLastPageDisabled,\n  };\n}\nexport default usePagination;\n"],"names":["mobileSizeBreak","mobileOnly","cssContent","css","desktopOnly","PaginationContainer","styled","CompactPaginationContainer","getTypographyStyles","CurrentPage","Pages","Page","DefaultButton","contents000","ArrowButton","bg200","bg300","BaseButton","contents300","bg100","PageButton","selected","usePagination","itemCountPerPage","pageRangeDisplayed","totalItemCount","activePage","buffer","firstPage","totalPages","rangeLastPage","useMemo","totalLastPage","prevPage","nextPage","isPrevPageDisabled","isNextPageDisabled"],"mappings":"sKAAO,MAAMA,EAAkB,IC0BlBC,EAAcC,GAA2CC;AAAAA,uCAC/BH;AAAA,MACjCE;AAAA;AAAA,EAKOE,EAAeF,GAA2CC;AAAAA,uCAChCH,EAAkB;AAAA,MACnDE;AAAA;AAAA,EAuB4BC;AAAAA,IAC9BF,EAAWE;AAAAA;AAAAA,GAEZ;AAAA,EAI8BA;AAAAA,IAC7BC,EAAYD;AAAAA;AAAAA,GAEb;AAAA,ECxDI,MAAME,EAAsBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUtCL,EAAWE;AAAAA;AAAAA,GAEZ;AAAA,EAGUI,EAA6BD,EAAO;AAAA;AAAA;AAAA,IAG7CE,EAAoB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQpBC,EAAcH,EAAO;AAAA,IAC9BE,EAAoB,SAAS;AAAA,EAGpBE,EAAQJ,EAAO;AAAA;AAAA;AAAA;AAAA,EAMfK,EAAOL,EAAO,KAErBM,EAAgBN,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,IAKzBE,EAAoB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOtBK;AAAA;AAAA;AAAA;AAAA,aAIEA;AAAA;AAAA;AAAA;AAAA,EAMAC,EAAcR,EAAOM,CAAa;AAAA,IAC3CR,EAAYD;AAAAA;AAAAA,0BAEUY;AAAA;AAAA;AAAA,0BAGAC;AAAA;AAAA,GAEvB;AAAA;AAAA,IAECf,EAAWE;AAAAA;AAAAA;AAAAA,GAGZ;AAAA,EAGUc,EAAaX,EAAOM,CAAa;AAAA;AAAA;AAAA,wBAGtBM;AAAA;AAAA,wBAEAC;AAAA;AAAA;AAAA,IAGpBlB,EAAWE;AAAAA;AAAAA;AAAAA,GAGZ;AAAA,EAGUiB,EAAad,EAAOW,CAAU;AAAA,IACvC,CAAC,CAAE,SAAAI,KACHA,GACAlB;AAAAA,0BACsBe;AAAA;AAAA,0BAEAC;AAAA;AAAA,ECxG1B,SAASG,EAAc,CACrB,iBAAAC,EACA,mBAAAC,EACA,eAAAC,EACA,WAAAC,CACF,EAAoB,CAClB,MAAMC,EAASD,EAAaF,IAAuB,EAAI,EAAI,EAErDI,EAAY,KAAK,IACrB,EACA,KAAK,MAAMF,EAAaF,EAAqBG,CAAM,EAAIH,EACrD,CAAA,EAGEK,EAAa,KAAK,KAAKJ,EAAiBF,CAAgB,EAExDO,EAAgBC,EAAA,QACpB,IACE,KAAK,IACHF,EACA,KAAK,KAAKH,EAAaF,CAAkB,EAAIA,CAC/C,EACF,CAACE,EAAYF,EAAoBK,CAAU,CAAA,EAGvCG,EAAgBD,EAAA,QACpB,IAAQN,EAAqB,KAAK,KAAKA,EAAiBF,CAAgB,EAA/C,EACzB,CAACE,EAAgBF,CAAgB,CAAA,EAG7BU,EAAWL,EAAY,EACvBM,EAAWJ,EAAgB,EAE3BK,EAAqBF,EAAW,EAChCG,EAAqBF,EAAWL,EAK/B,MAAA,CACL,UAAAD,EACA,cAAAE,EACA,cAAAE,EACA,WAAAH,EACA,SAAAI,EACA,SAAAC,EACA,mBAAAC,EACA,mBAAAC,EACA,oBAZ0BV,IAAe,EAazC,mBAZyBA,IAAeM,CAYxC,CAEJ"}