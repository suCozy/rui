{"version":3,"file":"preview-644efa76.js","sources":["../../src/mixins/colors/theme.ts","../../src/context/RUIContext/globalStyles.ts","../../src/context/RUIContext/index.tsx","../../.storybook/preview.tsx"],"sourcesContent":["import type { RUIColorThemeType } from './types';\n\n/**\n * {@link https://www.figma.com/file/2qQ5eJPRTiAKyz6Q1IzfMJ/WEB?node-id=2570%3A12136&viewport=347%2C475%2C0.47}\n */\nexport const ruiColorTheme: RUIColorThemeType = {\n  light: {\n    '--rui-primary100': '#000000',\n    '--rui-primary200': '#FFFFF9',\n    '--rui-secondary100': '#FF5414',\n    '--rui-contents000': '#212322',\n    '--rui-contents100': '#61615F',\n    '--rui-contents150': '#8B8B87',\n    '--rui-contents200': '#B2B1AD',\n    '--rui-contents300': '#CDCCC6',\n    '--rui-contents999': '#FFFFF9',\n    '--rui-disabled': '#CDCCC6',\n    '--rui-disabled-role-red': '#FFAA8D',\n    '--rui-disabled-secondary': '#FFCBBA',\n    '--rui-role-red': '#BB3811',\n    '--rui-role-yellow': '#EBA900',\n    '--rui-role-blue': '#00B3EA',\n    '--rui-role-green': '#29B31E',\n    '--rui-bg100': '#FFFFFF',\n    '--rui-bg200': '#F7F7F0',\n    '--rui-bg300': '#E8E7E0',\n    '--rui-bg-modal100': '#FFFFFF',\n    '--rui-bg-modal200': '#F7F7F0',\n    '--rui-bg-role-red': '#FCE9E6',\n    '--rui-bg-secondary100': '#FFF2F0',\n    '--rui-bg-highlight': '#FCF6E0',\n    '--rui-bg-role-yellow': '#FCF6E0',\n    '--rui-bg-role-blue': '#E0F5FC',\n    '--rui-bg-role-green': '#E7F6E5',\n    '--rui-divider': '#E8E7E0',\n    '--rui-fixed-white': '#FFFFF9',\n    '--rui-fixed-bg-white': '#000000',\n    '--rui-fixed-black': '#000000',\n  },\n  dark: {\n    '--rui-primary100': '#FFFFF9',\n    '--rui-primary200': '#000000',\n    '--rui-secondary100': '#FF5414',\n    '--rui-contents000': '#FFFFF9',\n    '--rui-contents100': '#CDCCC6',\n    '--rui-contents150': '#B2B1AD',\n    '--rui-contents200': '#8B8B87',\n    '--rui-contents300': '#61615F',\n    '--rui-contents999': '#212322',\n    '--rui-disabled': '#61615F',\n    '--rui-disabled-role-red': '#FFAA8D',\n    '--rui-disabled-secondary': '#FFCBBA',\n    '--rui-role-red': '#BB3811',\n    '--rui-role-yellow': '#F8CA42',\n    '--rui-role-blue': '#7AD3F3',\n    '--rui-role-green': '#74CA6B',\n    '--rui-bg100': '#000000',\n    '--rui-bg200': '#212322',\n    '--rui-bg300': '#444443',\n    '--rui-bg-modal100': '#212322',\n    '--rui-bg-modal200': '#444443',\n    '--rui-bg-role-red': '#392119',\n    '--rui-bg-secondary100': '#311D16',\n    '--rui-bg-highlight': '#45433E',\n    '--rui-bg-role-yellow': '#A25E00',\n    '--rui-bg-role-blue': '#004273',\n    '--rui-bg-role-green': '#006200',\n    '--rui-divider': '#444443',\n    '--rui-fixed-white': '#FFFFF9',\n    '--rui-fixed-bg-white': '#000000',\n    '--rui-fixed-black': '#000000',\n  },\n};\n","import { createGlobalStyle, css } from 'styled-components';\n\nimport { ruiColorTheme } from '@/mixins/colors/theme';\nimport type { RUIColorMixinsType, ThemeType } from '@/mixins/colors/types';\nimport { hexToRgb } from '@/mixins/colors/utils';\n\nexport const RUIGlobalStyle = createGlobalStyle<{\n  customMixins?: RUIColorMixinsType;\n  forceTheme?: ThemeType;\n}>(({ customMixins, forceTheme }) => {\n  switch (forceTheme) {\n    case 'light':\n      return css`\n        :root {\n          ${Object.entries({\n            ...ruiColorTheme.light,\n            ...customMixins?.light,\n          }).map(\n            ([key, value]) =>\n              `${key}: ${value}; ${key}__rgb: ${hexToRgb(value)};`\n          )}\n        }\n      `;\n    case 'dark':\n      return css`\n        :root {\n          ${Object.entries({\n            ...ruiColorTheme.dark,\n            ...customMixins?.dark,\n          }).map(\n            ([key, value]) =>\n              `${key}: ${value}; ${key}__rgb: ${hexToRgb(value)};`\n          )}\n        }\n      `;\n    default:\n      return css`\n        :root {\n          ${Object.entries({\n            ...ruiColorTheme.light,\n            ...customMixins?.light,\n          }).map(\n            ([key, value]) =>\n              `${key}: ${value}; ${key}__rgb: ${hexToRgb(value)};`\n          )}\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :root {\n            ${Object.entries({\n              ...ruiColorTheme.dark,\n              ...customMixins?.dark,\n            }).map(\n              ([key, value]) =>\n                `${key}: ${value}; ${key}__rgb: ${hexToRgb(value)};`\n            )}\n          }\n        }\n      `;\n  }\n});\n","import type { ReactNode } from 'react';\nimport { createContext, useContext, useMemo } from 'react';\n\nimport type { RUIColorMixinsType, ThemeType } from '@/mixins/colors/types';\nimport { getBrowserTheme } from '@/mixins/colors/utils';\n\nimport { RUIGlobalStyle } from './globalStyles';\n\nexport interface RUIContentProps {\n  customMixins?: RUIColorMixinsType;\n  forceTheme?: ThemeType;\n  setTheme?: (theme: ThemeType) => void;\n}\n\nexport interface RUIContextValue {\n  currentTheme: ThemeType;\n  setTheme: RUIContentProps['setTheme'];\n}\n\nconst RUIContext = createContext<RUIContextValue | null>(null);\n\n/** theme과 setTheme은 사용하는 곳에서 주입,\n * 기본적으로는 브라우저의 미디어쿼리를 통해서 light, dark를 결정 */\nexport function RUIProvider({\n  children,\n  customMixins,\n  forceTheme,\n  setTheme,\n}: { children: ReactNode } & RUIContentProps) {\n  const currentTheme: ThemeType = forceTheme ?? getBrowserTheme();\n  const ruiContextValue: RUIContextValue = useMemo(\n    () => ({ currentTheme, setTheme }),\n    [currentTheme, setTheme]\n  );\n\n  return (\n    <RUIContext.Provider value={ruiContextValue}>\n      <RUIGlobalStyle customMixins={customMixins} forceTheme={forceTheme} />\n      {children}\n    </RUIContext.Provider>\n  );\n}\n\nexport function useRUI() {\n  const ruiContextValue = useContext(RUIContext);\n\n  if (ruiContextValue === null) {\n    throw new Error('useRUI must be used within RUIProvider');\n  }\n\n  return ruiContextValue;\n}\n","import { RUIProvider } from '../src/context/RUIContext';\nimport { bg100, contents000, fixedBlack, fixedWhite } from '../src';\nimport React from 'react';\nimport { Preview } from '@storybook/react';\n\n// global decorators를 설정하기 위해 반드시 필요한 react 모듈 import\n\n/**\n * storybook layout settings\n */\nexport const parameters = {\n  layout: 'padded',\n  backgrounds: {\n    default: 'background',\n    values: [\n      { name: 'background', value: bg100 },\n      { name: 'contents', value: contents000 },\n      { name: 'white', value: fixedWhite },\n      { name: 'black', value: fixedBlack },\n    ],\n  },\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  options: {\n    showPanel: true,\n    panelPosition: 'bottom',\n    showNav: true,\n    isFullscreen: false,\n    isToolshown: true,\n    storySort: {\n      method: 'alphabetical',\n      // Order Docs Overview and Docs Overview/Intro story first\n      order: ['Docs Overview', ['Intro']],\n    },\n  },\n  knobs: {\n    disable: true,\n  },\n  controls: {\n    expanded: true,\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n  // @see https://storybook.js.org/docs/react/writing-tests/accessibility-testing#configure\n  a11y: {\n    element: '#root',\n    config: {\n      rules: [\n        {\n          id: 'autocomplete-valid',\n          selector: '*:not([autocomplete=\"nope\"])',\n        },\n        {\n          id: 'image-alt',\n          enabled: false,\n        },\n      ],\n    },\n    options: {},\n    manual: false,\n  },\n};\n\nexport const decorators = [\n  (Story, context) => (\n    <RUIProvider forceTheme={context.globals.theme}>\n      <div style={{ margin: '3em', color: contents000 }}>\n        <Story />\n      </div>\n    </RUIProvider>\n  ),\n];\n\nconst preview: Preview = {\n  globalTypes: {\n    theme: {\n      name: 'Theme',\n      description: 'Global theme for components',\n      defaultValue: 'light',\n      toolbar: {\n        icon: 'circlehollow',\n        items: ['light', 'dark'],\n        showName: true,\n        dynamicTitle: true,\n      },\n    },\n  },\n};\n\nexport default preview;\n"],"names":["ruiColorTheme","RUIGlobalStyle","createGlobalStyle","customMixins","forceTheme","css","key","value","hexToRgb","RUIContext","createContext","RUIProvider","children","setTheme","currentTheme","getBrowserTheme","ruiContextValue","useMemo","jsxs","jsx","parameters","bg100","contents000","fixedWhite","fixedBlack","decorators","Story","context","preview"],"mappings":"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"}