{"version":3,"file":"TextInput.stories-cbb9ddda.js","sources":["../../src/common/utils/id.ts","../../node_modules/@radix-ui/react-label/node_modules/@babel/runtime/helpers/esm/extends.js","../../node_modules/@radix-ui/react-label/dist/index.module.js","../../src/components/Inputs/TextInput/styles.ts","../../src/components/Inputs/TextInput/index.tsx"],"sourcesContent":["export const createRandomId = () => Math.random().toString(36).slice(2, 9);\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import $7V4JZ$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $7V4JZ$forwardRef, createElement as $7V4JZ$createElement} from \"react\";\nimport {Primitive as $7V4JZ$Primitive} from \"@radix-ui/react-primitive\";\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/ const $b73a6c6685e72184$var$NAME = 'Label';\nconst $b73a6c6685e72184$export$b04be29aa201d4f5 = /*#__PURE__*/ $7V4JZ$forwardRef((props, forwardedRef)=>{\n    return /*#__PURE__*/ $7V4JZ$createElement($7V4JZ$Primitive.label, $7V4JZ$babelruntimehelpersesmextends({}, props, {\n        ref: forwardedRef,\n        onMouseDown: (event)=>{\n            var _props$onMouseDown;\n            (_props$onMouseDown = props.onMouseDown) === null || _props$onMouseDown === void 0 || _props$onMouseDown.call(props, event); // prevent text selection when double clicking label\n            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n        }\n    }));\n});\n/*#__PURE__*/ Object.assign($b73a6c6685e72184$export$b04be29aa201d4f5, {\n    displayName: $b73a6c6685e72184$var$NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ const $b73a6c6685e72184$export$be92b6f5f03c0fe9 = $b73a6c6685e72184$export$b04be29aa201d4f5;\n\n\n\n\nexport {$b73a6c6685e72184$export$b04be29aa201d4f5 as Label, $b73a6c6685e72184$export$be92b6f5f03c0fe9 as Root};\n//# sourceMappingURL=index.module.js.map\n","import styled, { css } from 'styled-components';\nimport * as Label from '@radix-ui/react-label';\n\nimport {\n  bg200,\n  contents000,\n  contents200,\n  contents300,\n  contents999,\n  roleRed,\n} from '@/mixins/colors';\nimport { ellipsis, getTypographyStyles } from '@/mixins/typography';\n\nimport type { HintTextColorType } from './types';\n\nexport const InputContainer = styled.div<{\n  disabled?: boolean;\n  hasError?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  border: 1px solid ${contents300};\n  border-radius: 4px;\n  padding: 0 12px;\n  background-color: ${contents999};\n  gap: 8px;\n\n  transition: border-color 0.2s, background-color 0.2s;\n\n  ${({ hasError, disabled }) => [\n    hasError\n      ? css`\n          border-color: ${roleRed};\n        `\n      : css`\n          &:focus-within {\n            border-color: ${contents000};\n          }\n        `,\n    disabled &&\n      css`\n        background-color: ${bg200};\n      `,\n  ]}\n`;\n\nexport const InputInner = styled.input`\n  ${getTypographyStyles('Body1_M')}\n\n  display: block;\n  flex-grow: 1;\n  width: 100%;\n  padding: 10px 0;\n  border: 0;\n  color: ${contents000};\n  background-color: transparent;\n\n  &:placeholder-shown {\n    ${ellipsis()}\n  }\n\n  &::placeholder {\n    color: ${contents200};\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const InputLabel = styled(Label.Label)`\n  ${getTypographyStyles('Headline4_B')}\n  display: block;\n  margin-bottom: 12px;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n\n  > mark {\n    all: unset;\n    color: ${roleRed};\n  }\n`;\n\nexport const InputError = styled.div`\n  ${getTypographyStyles('Body2_M')}\n  color: ${roleRed};\n\n  margin-top: 8px;\n`;\n\nexport const InputHintText = styled.span<{ textColor?: HintTextColorType }>`\n  ${getTypographyStyles('Body1_M')}\n  color: ${({ textColor }) =>\n    ({ roleRed, contents000, contents300 }[textColor ?? 'roleRed'] ?? roleRed)};\n  white-space: nowrap;\n`;\n\nexport const InputTogglePasswordVisibilityButton = styled.button`\n  all: unset;\n  appearance: none;\n  cursor: pointer;\n\n  > svg {\n    display: block;\n  }\n`;\n","import { forwardRef, memo, useState } from 'react';\nimport type {\n  ReactNode,\n  ForwardRefRenderFunction,\n  InputHTMLAttributes,\n} from 'react';\n\nimport { IconVisibilityS, IconVisibilityOffS } from '@/icons';\nimport { createRandomId } from '@/common/utils/id';\n\nimport {\n  InputContainer,\n  InputError,\n  InputHintText,\n  InputInner,\n  InputLabel,\n  InputTogglePasswordVisibilityButton,\n} from './styles';\nimport type { HintTextColorType } from './types';\n\ntype BaseInputProps = Omit<\n  InputHTMLAttributes<HTMLInputElement>,\n  `aria-${string}`\n>;\n\ntype TextInputProps = {\n  type?: 'text' | 'number' | 'email' | 'search' | 'tel' | 'url';\n  label?: ReactNode;\n  hintText?: string;\n  hintTextColor?: HintTextColorType;\n  leftElement?: ReactNode;\n  rightElement?: ReactNode;\n  errorMessage?: string;\n};\n\ntype PasswordInputProps = Omit<TextInputProps, 'type'> & {\n  type: 'password';\n  hasTogglePasswordVisibilityButton: boolean;\n};\n\nexport type InputProps = BaseInputProps & (TextInputProps | PasswordInputProps);\n\nconst _TextInput: ForwardRefRenderFunction<HTMLInputElement, InputProps> = (\n  {\n    className,\n    label,\n    leftElement,\n    rightElement,\n    disabled,\n    hintText,\n    hintTextColor,\n    errorMessage,\n    ...props\n  },\n  ref\n) => {\n  const [inputId] = useState(createRandomId());\n  const [labelId] = useState(createRandomId());\n  const [isVisiblePassword, setIsVisiblePassword] = useState(false);\n  const isForceVisibleInput =\n    props.type === 'password' &&\n    props.hasTogglePasswordVisibilityButton &&\n    isVisiblePassword;\n  hintTextColor;\n  return (\n    <>\n      {label && (\n        <InputLabel id={labelId} htmlFor={inputId}>\n          {label}\n          {props.required && <mark>*</mark>}\n        </InputLabel>\n      )}\n      <InputContainer\n        disabled={disabled}\n        hasError={!!errorMessage}\n        className={className}\n      >\n        {leftElement}\n        <InputInner\n          disabled={disabled}\n          id={inputId}\n          aria-labelledby={label ? labelId : undefined}\n          {...props}\n          type={isForceVisibleInput ? 'text' : props.type ?? 'text'}\n          ref={ref}\n        />\n        {hintText && (\n          <InputHintText textColor={hintTextColor}>{hintText}</InputHintText>\n        )}\n        {props.type === 'password' &&\n          props.hasTogglePasswordVisibilityButton && (\n            <TogglePasswordVisibilityButton\n              value={isVisiblePassword}\n              onChange={setIsVisiblePassword}\n            />\n          )}\n        {rightElement}\n      </InputContainer>\n      {errorMessage && <InputError>{errorMessage}</InputError>}\n    </>\n  );\n};\n\nconst TogglePasswordVisibilityButton = ({\n  value,\n  onChange,\n}: {\n  value: boolean;\n  onChange: (value: boolean) => void;\n}) => (\n  <InputTogglePasswordVisibilityButton\n    role=\"switch\"\n    aria-checked={value ? 'true' : 'false'}\n    aria-label=\"비밀번호 표시\"\n    onClick={() => {\n      onChange(!value);\n    }}\n  >\n    {value ? <IconVisibilityOffS /> : <IconVisibilityS />}\n  </InputTogglePasswordVisibilityButton>\n);\n\nexport const TextInput = memo(forwardRef(_TextInput));\n"],"names":["createRandomId","_extends","target","i","source","key","$b73a6c6685e72184$export$b04be29aa201d4f5","$7V4JZ$forwardRef","props","forwardedRef","$7V4JZ$createElement","$7V4JZ$Primitive","$7V4JZ$babelruntimehelpersesmextends","event","_props$onMouseDown","InputContainer","styled","contents300","contents999","hasError","disabled","css","roleRed","contents000","bg200","InputInner","getTypographyStyles","ellipsis","contents200","InputLabel","Label.Label","InputError","InputHintText","textColor","InputTogglePasswordVisibilityButton","_TextInput","className","label","leftElement","rightElement","hintText","hintTextColor","errorMessage","ref","inputId","useState","labelId","isVisiblePassword","setIsVisiblePassword","isForceVisibleInput","jsxs","Fragment","jsx","TogglePasswordVisibilityButton","value","onChange","IconVisibilityOffS","IconVisibilityS","TextInput","memo","forwardRef"],"mappings":"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","x_google_ignoreList":[1,2]}